on:
  workflow_call:
    inputs:
      aws-region:
        required: false
        type: string
      aws-id:
        required: false
        type: string
      ecr-name:
        required: false
        type: string

jobs:
  Build:
    runs-on: ubuntu-latest
    outputs:
      img_tag: ${{ steps.set_tag.outputs.img_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set tag
        id: set_tag
        run: |
          TAG="v${GITHUB_SHA::7}"
          
          echo "img_tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "TAG=$TAG"

      - name: Check image exists
        run: |
          response=$(curl -s "https://hub.docker.com/v2/repositories/library/${{ inputs.ecr-name }}/tags/")
          echo "response=$response"
          if [[ $response == *"\"message\":\"httperror 404: object not found\""* ]]; then
            echo "Image ${{ inputs.ecr-name }}:${{ steps.set_tag.outputs.img_tag }} does not exist on Docker Hub."
          else
            echo "Image ${{ inputs.ecr-name }}:${{ steps.set_tag.outputs.img_tag }} exists on Docker Hub."
            exit 1
          fi

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: |
          docker image prune -a --force --filter "until=24h" > /dev/null 2>&1
          echo "TAG=${{ steps.set_tag.outputs.img_tag }}"
          docker build -t ${{ inputs.ecr-name }}:${{ steps.set_tag.outputs.img_tag }} .

      - name: Push Docker image
        run: |
          docker tag ${{ inputs.ecr-name }}:${{ steps.set_tag.outputs.img_tag }} ${{ secrets.DOCKER_USERNAME }}/${{ inputs.ecr-name }}:${{ steps.set_tag.outputs.img_tag }}
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ inputs.ecr-name }}:${{ steps.set_tag.outputs.img_tag }}
