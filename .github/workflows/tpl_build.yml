on:
  workflow_call:
    inputs:
      aws-region:
        type: string
        required: false
      aws-id:
        type: string
        required: false
      ecr-name:
        type: string
        required: false

jobs:
  Build:
    runs-on: ubuntu-latest
    outputs:
      img_tag: ${{ steps.set_tag.outputs.img_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set tag
        id: set_tag
        run: |
          TAG="${{ inputs.environment }}-${GITHUB_SHA::7}"
          
          echo "img_tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "TAG=$TAG"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ inputs.aws-id }}:role/GitHubAction-AssumeRoleWithAction
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ input.aws-region }}

      - name: Sts GetCallerIdentity
        run: |
          aws sts get-caller-identity

      - name: Check image exists
        run: |
          response=$(aws --region ${{ inputs.aws-region }} ecr describe-images --repository-name ${{ inputs.ecr-name }} --image-ids imageTag=${{ steps.set_tag.outputs.img_tag }} --query 'imageDetails[*].{Tag: imageTags[0]}' --output json 2>/dev/null) || true
          echo "response=$response"
          if [ -z "$response" ]; then
            echo "Image does not exist."
          else
            echo "Image exists."
            exit 1
          fi

      - name: Build Docker Image
        run: |
          docker image prune -a --force --filter "until=24h" > /dev/null 2>&1
          echo "TAG=${{ steps.set_tag.outputs.img_tag }}"
          docker build -t ${{ inputs.ecr-name }}:${{ steps.set_tag.outputs.img_tag }} .

      - name: Push Docker Image
        run: |
          aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin ${{ inputs.aws-id }}.dkr.ecr.us-east-2.amazonaws.com
          docker tag ${{ inputs.ecr-name }}:${{ steps.set_tag.outputs.img_tag }} ${{ inputs.aws-id }}.dkr.ecr.us-east-2.amazonaws.com/${{ inputs.ecr-name }}:${{ steps.set_tag.outputs.img_tag }}
          docker push ${{ inputs.aws-id }}.dkr.ecr.us-east-2.amazonaws.com/${{ inputs.ecr-name }}:${{ steps.set_tag.outputs.img_tag }}
